// Comentario
package Compilador;

import static Compilador.Tokens.ERROR;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.undo.UndoManager;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Stack;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import static javax.swing.WindowConstants.EXIT_ON_CLOSE;

public class Principal extends javax.swing.JFrame {
    String scan = "";
    NumeroLinea numerolinea2;
    HerramientaArchivo archivo;
    UndoManager manager;
    Lexer lexer;
    public Stack<String> pila = new Stack();
    ArrayList<String> opRelacionales = new ArrayList<>(Arrays.asList("==","!=",	"<","<=",">",">=","("));
    ArrayList<String> Columnas = new ArrayList<>(Arrays.asList("programa",	"id",	"num","int","float","boolean","String","litstring","true","false",	";",	":",	",",	 "+",	 "-",	"*",	"/",	"{",	"}",	"(",	")",	 "=",	"<",	">",	"!=",	"<=",	">=",	 "==",	"switch",	"do",	"while",	"case","default",	"break",	"print",	"scan",	"$",	"I",	"P",	"B",	"Tipo",	"V",	"A",	"A´", "Relacional",	"R",	"Exp",	"E",	"Term",	"T",	"F",	"SwitchStatement",	"CaseList",	"Case",	"DoWhileStatement",	"printStatement",	"scanStatement"));
    ArrayList<Integer> Reducciones = new ArrayList<>(Arrays.asList(2, 10, 6, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 6, 4, 10, 2, 2, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 4, 6, 6, 0, 4, 6, 6, 0, 2, 2, 2, 6, 2, 2, 16, 4, 6, 12, 20, 12, 6));
    ArrayList<String> NTProduccion = new ArrayList<>(Arrays.asList("I´", "I", "P","P", "B", "B", "B", "B","B", "Tipo", "Tipo", "Tipo", "Tipo", "V", "V", "A","A´","A´", "Relacional", "R", "R", "R", "R", "R", "R", "R", "Exp", "Exp", "Exp", "E", "E", "E", "Term", "T", "T", "T", "F", "F", "F", "F", "F", "F", "SwitchStatement", "CaseList", "CaseList", "Case", "DoWhileStatement", "printStatement", "scanStatement"));
    Map<String, Integer> tablaSimbolos = new LinkedHashMap<>();
    ArrayList<Integer> tipoDato = new ArrayList<>(Arrays.asList(0, 1, 2,3)); // 0 --> Int | 1 --> Float | 2 --> Boolean | 3 --> String
    public String componente; 
    Stack<String> pilaOperadores = new Stack();
    Stack<String> pilaSemantica = new Stack();
    String expPosfija = "", intermedio, vAsig, estadoAntSw = "", estadoSOP = "", expInfija="", est="";
    
    public boolean[][] tablaRelacional = 
    {
        {true, true, false, false},
        {true, true, false, false},
        {false, false, true, false},
        {false, false, false, false}
    };
    public String[][] tablaTipos = 
    {
        {"0", "1", "-1", "-1"},
        {"1", "1", "-1", "-1"},
        {"-1","-1", "-1", "-1"},
        {"-1", "-1", "-1", "-1"}
    };
    
    public String[][] tablaTiposOp1 = 
    {
        {"2",	"2",	"-1",	"-1"},
        {"2",	"2",	"-1",	"-1"},
        {"-1",	"-1",	"-1",	"-1"},
        {"-1",	"-1",	"-1",	"-1"}
    };
    
   public String[][] tablaTiposOp2 = 
    {
        {"2",	"2",	"-1",	"2"},
        {"2",	"2",	"-1",	"-1"},
        {"-1",	"-1",	"2",	"-1"},
        {"-1",	"-1",	"-1",	"2",}
    };
    public boolean[][] tablaAsigTipo = 
    {
        {true, false, false, false},
        {true, true, false, false},
        {false, false, true, false},
        {false, false, false, true}
    };
    public String[][] Tabla = 
    {
        {"q2",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q1",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P0",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q3",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P3",	"",	"q6",	"q7",	"q8",	"q9",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P3",	"P3",	"",	"",	"",	"",	"P3",	"",	"",	"",	"q4",	"",	"q5",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q10",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"q19",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P9",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P10",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P11",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P12",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q20",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P4",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P4",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P5",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P5",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P6",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P6",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P7",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P7",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q21",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q22",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q23",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q24",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q27",	"",	"q26",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q25",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P1",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q42",	"",	"",	"",	"",	"",	"",	"",	"q28",	"q29",	"",	"q31",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	"q30"},
{"",	"q43",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q44",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q40",	"",	"",	"",	"",	"",	"",	"",	"",	"q45",	"",	"q31",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	"q39"},
{"",	"P2",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P2",	"P2",	"",	"",	"",	"",	"P2",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q46",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P3",	"",	"q6",	"q7",	"q8",	"q9",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P3",	"P3",	"",	"",	"",	"",	"P3",	"",	"",	"",	"q47",	"",	"q5",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P16",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P17",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P25",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P25",	"",	"q51",	"q50",	"q52",	"q53",	"q54",	"q55",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q49",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q56",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q57",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P31",	"",	"",	"q59",	"q60",	"",	"",	"",	"",	"",	"P31",	"",	"P31",	"P31",	"P31",	"P31",	"P31",	"P31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q58",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P35",	"",	"",	"P35",	"P35",	"q62",	"q63",	"",	"",	"",	"P35",	"",	"P35",	"P35",	"P35",	"P35",	"P35",	"P35",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q61",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P36",	"P36",	"",	"P36",	"P36",	"P36",	"P36",	"",	"",	"",	"P36",	"",	"P36",	"P36",	"P36",	"P36",	"P36",	"P36",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P37",	"P37",	"",	"P37",	"P37",	"P37",	"P37",	"",	"",	"",	"P37",	"",	"P37",	"P37",	"P37",	"P37",	"P37",	"P37",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P38",	"P38",	"",	"P38",	"P38",	"P38",	"P38",	"",	"",	"",	"P38",	"",	"P38",	"P38",	"P38",	"P38",	"P38",	"P38",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q64",	"",	"q31",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P40",	"P40",	"",	"P40",	"P40",	"P40",	"P40",	"",	"",	"",	"P40",	"",	"P40",	"P40",	"P40",	"P40",	"P40",	"P40",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P41",	"P41",	"",	"P41",	"P41",	"P41",	"P41",	"",	"",	"",	"P41",	"",	"P41",	"P41",	"P41",	"P41",	"P41",	"P41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q65",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q66",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q67",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q68",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q27",	"",	"q26",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q69",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P14",	"P14",	"",	"",	"",	"",	"P14",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q70",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P18",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P18",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q71",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q72",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q73",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q74",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q75",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q76",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P31",	"",	"",	"q59",	"q60",	"",	"",	"",	"",	"",	"P31",	"",	"P31",	"P31",	"P31",	"P31",	"P31",	"P31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q77",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P31",	"",	"",	"q59",	"q60",	"",	"",	"",	"",	"",	"P31",	"",	"P31",	"P31",	"P31",	"P31",	"P31",	"P31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q78",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P28",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P28",	"",	"P28",	"P28",	"P28",	"P28",	"P28",	"P28",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q79",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q80",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P32",	"",	"",	"P32",	"P32",	"",	"",	"",	"",	"",	"P32",	"",	"P32",	"P32",	"P32",	"P32",	"P32",	"P32",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q81",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q82",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q83",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q84",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q85",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q86",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q87",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"P13",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P13",	"P13",	"",	"",	"",	"",	"P13",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P19",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P19",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P20",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P20",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P21",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P21",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P22",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P22",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P23",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P23",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P24",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P24",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P26",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P26",	"",	"P26",	"P26",	"P26",	"P26",	"P26",	"P26",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P27",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P27",	"",	"P27",	"P27",	"P27",	"P27",	"P27",	"P27",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P31",	"",	"",	"q59",	"q60",	"",	"",	"",	"",	"",	"P31",	"",	"P31",	"P31",	"P31",	"P31",	"P31",	"P31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q88",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P31",	"",	"",	"q59",	"q60",	"",	"",	"",	"",	"",	"P31",	"",	"P31",	"P31",	"P31",	"P31",	"P31",	"P31",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q89",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P35",	"",	"",	"P35",	"P35",	"q62",	"q63",	"",	"",	"",	"P35",	"",	"P35",	"P35",	"P35",	"P35",	"P35",	"P35",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q90",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P35",	"",	"",	"P35",	"P35",	"q62",	"q63",	"",	"",	"",	"P35",	"",	"P35",	"P35",	"P35",	"P35",	"P35",	"P35",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q91",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P39",	"P39",	"",	"P39",	"P39",	"P39",	"P39",	"",	"",	"",	"P39",	"",	"P39",	"P39",	"P39",	"P39",	"P39",	"P39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P48",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q95",	"q94",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q92",	"q93",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q96",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q97",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P29",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P29",	"",	"P29",	"P29",	"P29",	"P29",	"P29",	"P29",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P30",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P30",	"",	"P30",	"P30",	"P30",	"P30",	"P30",	"P30",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P33",	"",	"",	"P33",	"P33",	"",	"",	"",	"",	"",	"P33",	"",	"P33",	"P33",	"P33",	"P33",	"P33",	"P33",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P34",	"",	"",	"P34",	"P34",	"",	"",	"",	"",	"",	"P34",	"",	"P34",	"P34",	"P34",	"P34",	"P34",	"P34",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q98",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q95",	"q94",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q99",	"q93",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q100",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q101",	"",	"",	"",	"",	"",	""},
{"",	"q36",	"q37",	"",	"",	"",	"",	"q38",	"q40",	"q41",	"",	"",	"",	"q32",	"q33",	"",	"",	"",	"",	"q39",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q102",	"",	"q31",	"",	"q34",	"",	"q35",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P47",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P47",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q103",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P43",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q104",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q105",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q106",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P42",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P42",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P44",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q107",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q108",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q109",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"q15",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P8",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q16",	"q17",	"",	"",	"",	"P8",	"q18",	"",	"",	"",	"",	"q110",	"",	"",	"q11",	"",	"",	"",	"",	"",	"",	"",	"",	"q12",	"",	"",	"q13",	"q14",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"q111",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P46",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P46",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""},
{"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"P45",	"P45",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	"",	""}
    };
    String res, err, codigoObjeto = "", var, doWhile;
    boolean ban=true;
    int tipo = -1, puntero = 0, cont = 0;
    int tipoAsig = -1, tipoSwitch = -1;
    boolean compCadenaBand = false, bandDoWhile = false;
    int punteroSt = 0, punteroDoWhile = 0;
    public Stack<Integer> pilaDoWhile = new Stack();

    public Principal() {
        this.manager = new UndoManager();
        initComponents();
        inicializar();
        codigoFuente.getDocument().addUndoableEditListener(manager);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    private void AnalisisLexico() {
        InfoTokens infoToken;
        try {
            File codigo = new File("archivo.eth");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytes = codigoFuente.getText().getBytes();
            output.write(bytes);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF-8"));
            lexer = new Lexer(entrada);
            infoToken = new InfoTokens();
            String resu = "";
            InicioCodigo();
            while (true) {
                Tokens token = lexer.yylex();
                if (token == null) {
                    AnalisisSintactico("$", "", (infoToken.numeroLinea + 1) + "");
                    resu += "";
                    lexico.setText(resu);
                    FinCodigo();
                    System.out.println(expPosfija + "\n");
                    System.out.println(codigoObjeto);
                    return;
                }
                switch (token) {
                    case ERROR:
                        err += "Error lexico en la linea " + (infoToken.numeroLinea + 1) + " simbolo: " + lexer.lexeme + " incorrecto" + "\n";
                        errores.setText(err);
                        return;
                    default:
                        if (token.getSimbolo() == null) {
                            resu += token + "\n";
                            ban=AnalisisSintactico(token + "", infoToken.lexema, (infoToken.numeroLinea + 1) + "");
                            if(ban==false)
                                return;
                            lexico.setText(resu);
                        } else {
                            resu += token.getSimbolo() + "\n";
                            ban=AnalisisSintactico(token.getSimbolo(), infoToken.lexema, (infoToken.numeroLinea + 1) + "");
                            if(ban==false)
                                return;
                            lexico.setText(resu);
                        }
                        break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean AnalisisSintactico(String comp, String lexema, String nlinea) 
    {
        String cimaPila, accion;
        ban = false;
        while(ban == false)
        {
            int ren, col = 0;
            //System.out.println("\nComponente: "+comp);
            cimaPila = pila.peek();
            //System.out.println("Cima de la pila: "+cimaPila);
            ren = Integer.parseInt(cimaPila.substring(1));
            for(String columna : Columnas)
            {
                if(comp.equals(columna))
                    break;
                else
                    col++;
            }
            //System.out.println("Renglon: "+ren + " Columna: " + col);
            accion = Tabla[ren][col];
            if(accion.equals(""))
            {
                Error(ren, lexema, nlinea);
                return false;
            }
            if(accion.equals("P0"))
            {
                res+="La cadena se acepta...";
                sintactico.setText(res);
                return false;
            }
            switch(accion.substring(0, 1))
            {
                case "q":
                    ban=Desplazar(comp, accion, lexema, accion.substring(1), nlinea);
                    if(ban == false)
                        return false;
                    break;
                case "P":
                    ban=Reduccion(accion);
                    break;
            }
        }
        return true;
    }
    
    private boolean Desplazar(String comp, String accion, String lexema, String estado, String nlinea)
    {
        pila.push(comp);
        pila.push(accion);
        //System.out.println("Desplazamiento.- " + "Terminal: " + comp + " Estado: " + pila.peek());
        if(est.equals("45"))
            expInfija += lexema;
// Acciones semanticas de acuerdo a estados
        switch (estado) 
        {
            case "6":
            case "7":
            case "8":
            case "9":
                // Reconocer el tipo de dato de los id´s que se registraran
                TipoID(estado);
                break;
            case "16": // Switch
                
                break;
            case "17": // Do
                punteroDoWhile++;
                codigoObjeto += " do"+punteroDoWhile+":\n";
                pilaDoWhile.add(punteroDoWhile);
                break;
            case "18": // Print
                codigoObjeto += "  printf(";
                break;
            case "24": // Expresion del print
                estadoAntSw = "45";
                est = "45";
                break;
            case "68": // ) print
                ban = FinExpresion(lexema, nlinea);
                if(ban == false)
                    return false;
                expPosfija = "";
                break;
            case "19":
            case "46":
                // Registrar identificadores
                ban = RegistrarID(lexema, nlinea);
                if(ban == false)
                    return false;
                break;
            case "27":
                tipo = -1;
                break;
            case "15":
            case "43":
                // Guardar el tipo de dato de la variable a la que se le asigna, o de la variable en los parentecis del switch 
                ban = TipoAsigSw(lexema, nlinea, estado);
                if(ban == false)
                    return false;
                break;
            case "36":// id
            case "37":// num
            case "38":// string
            case "40":// true
            case "41":// false
                // Para identificadores, verificar si el id existe, si es asi, insertar su tipo de dato en la pila semantica.
                ban = PushPilaSem(estado, lexema, nlinea, vAsig);
                if(ban == false)
                    return false;
                break;
            case "42"://scan
                scan = "1";
                switch(tablaSimbolos.get(vAsig))
                {
                    case 0://int 
                        codigoObjeto += "  scanf(\"%d\"," + "&" + vAsig + ");\n";
                        break;
                    case 1:// float
                         codigoObjeto += "  scanf(\"%f\"," + "&" + vAsig + ");\n";
                        break;
                    case 2:// boolean
                         codigoObjeto += "  scanf(\"%d\"," + "&" + vAsig + ");\n";
                        break;
                    case 3:// String
                         codigoObjeto += "  scanf(\"%s\"," + "" + vAsig + ");\n";
                        break;
                }
                break;
            case "48":
                ban = FinExpresion(lexema, nlinea);
                if(ban == false)
                    return false;
                compCadenaBand = false;
                expPosfija = "";
                break;
            case "32": //+
            case "33": //-
            case "39": //(
            case "50": //<
            case "51": //>
            case "52": //!=
            case "53": //<=
            case "54": //>=
            case "55": //==
            case "59": //+
            case "60": //-
            case "62": //*
            case "63": // /
            case "83": // )
                // realizar accion en pila de Operadores
                ban = Operadores(comp, lexema, nlinea);
                if(ban == false)
                    return false;
                break;
            case "95": // estado anterior al id-num-vchar-true-false que se coloca despues del case en el sw (case 1: ejemplo)
                estadoAntSw = "95";
                break;/*
            case "29": // Expresiones Relacional
            case "64":
            case "45":
            case "102":
                //ExpresionRelacional();
                break;*/
            case "106": // ) do while
                ban = FinExpresion(lexema, nlinea);
                if(ban == false)
                    return false;
                expPosfija = "";
                break;
            case "108": //Fin de do while
                codigoObjeto += " goto do"+pilaDoWhile.peek()+";\n";
                pilaDoWhile.pop();
                break;
        }
// //////////////////////////////////////////////////////////
        return true;
    }
    
    private boolean Reduccion(String accion)
    {
        int redu, ren, col = 0;
        String estadoant, nt, estadoact;
        redu = Integer.parseInt(accion.substring(1));
        if(redu != 0)
        {
            for(int i=0; i<Reducciones.get(redu); i++)
                pila.pop();
        }
        nt = NTProduccion.get(redu);
        estadoant = pila.peek();
        pila.push(nt);
        ren = Integer.parseInt(estadoant.substring(1));
        for(String columna : Columnas)
        {
            if(nt.equals(columna))
                break;
            else
                col++;
        }
        estadoact = Tabla[ren][col];
        pila.push(estadoact);
        if(redu == 18 && !estadoant.substring(1).equals("39"))
        {
            est = "";
            cont++;
            if(cont >= 2)
            {
                //expInfija += ")";
                expInfija += "";
                cont-=2;
            }
        }
        //System.out.println("Reduccion.- " + "NT: " + nt + " Cima de la Pila: " + pila.peek() + " Produccion: " + redu +" Estado Ant: " + estadoant);
        return false;
    }
    
    private void TipoID(String estado)
    {
        switch (estado) 
        {
            case "6":
                tipo = 0; //int 
                break;
            case "7":
                tipo = 1; // float
                break;
            case "8":
                tipo = 2; // boolean
                break;
            case "9":
                tipo = 3; // cadena
                break;
        }
    }
    
    private boolean RegistrarID(String lexema, String nlinea)
    {
        if(tablaSimbolos.get(lexema) == null && tipo != -1){
            tablaSimbolos.put(lexema, tipo);
            ExpresionCodigo(lexema);
        }
        else
        {
            err += "Error semantico en linea " + nlinea + " el identificador " + lexema + " ya existe" + "\n";
            errores.setText(err);
            res+="La cadena no se acepta...";
            sintactico.setText(res);
            return false;
        }
        return true;
    }
    
    private boolean TipoAsigSw(String lexema, String nlinea, String estado)
    {
        if(tablaSimbolos.get(lexema) != null && estado.equals("15")) // identificador en expresiones
        {
            tipoAsig = tablaSimbolos.get(lexema);
            vAsig = lexema;
        }
        else if(tablaSimbolos.get(lexema) != null && estado.equals("43")) // identificador de switchStatement
            tipoSwitch = tablaSimbolos.get(lexema);
        else
        {
            err += "Error semantico en linea " + nlinea + " el identificador " + lexema + " no existe" + "\n";
            errores.setText(err);
            res+="La cadena no se acepta...";
            sintactico.setText(res);
            return false;
        }
        return true;
    }
    
    private boolean PushPilaSem(String estado, String lexema, String nlinea, String vAsig)
    {
        switch (estado) 
        {
            case "36": // identificadores
                if(tablaSimbolos.get(lexema) != null)
                {
                    pilaSemantica.push(tablaSimbolos.get(lexema)+"");
                    expPosfija += lexema + " ";
                }
                else
                {
                    err += "Error semantico en linea " + nlinea + " el identificador " + lexema + " no existe" + "\n";
                    errores.setText(err);
                    res+="La cadena no se acepta...";
                    sintactico.setText(res);
                    return false;
                }
                break;
            case "37": // num
                if(lexema.matches("(0|-?[1-9][0-9]*)"))
                {
                    pilaSemantica.push("0");
                    expPosfija += lexema + " ";
                }
                else if(lexema.matches("(-?[1-9][0-9]*\\.[0-9]*[1-9])|(0\\.0)|(-?[1-9][0-9]*\\.0)|(-?[1-9][0-9]*\\.[0-9]*[1-9][eE][-+][1-9][0-9]*)|(-?0\\.[0-9]*[1-9][eE][-+][1-9][0-9]*)"))
                {
                    pilaSemantica.push("1");
                    expPosfija += lexema + " ";
                }
                break;
            case "38": // String
                pilaSemantica.push("3");
                if(tipoAsig==2){
                    compCadenaBand = true;
                    expPosfija += lexema + " ";
                }else{
                    if(!estadoAntSw.equals("45"))
                        codigoObjeto += "  strcpy(" + vAsig + ", " + lexema + ");\n";
                }
                break;
            case "40":
            case "41": // boolean
                pilaSemantica.push("2");
                if(lexema.equals("true"))
                    expPosfija += "1";
                else
                    expPosfija += "0";
        }
        if(estadoAntSw.equals("95"))
        {
            ban = SemanticoEvExp(nlinea);
            if(ban == false)
                    return false;
        }
        return true;
    }
    
    private boolean Operadores(String comp, String lexema, String nlinea)
    {
        String simboloOp;
        if(!pilaOperadores.isEmpty()){ //si esta vacia soo inserta el componente
            if(comp.equals("(")){ //solo ingresa el ( a la pila
                pilaOperadores.push(comp);
                //System.out.println("pila" + pilaOperadores);
                return true;
            }
            if(comp.equals(")")){ //si se hay un ) se realiza operaciones hsat encontrar ( en pila
               while(!pilaOperadores.peek().equals("("))
               {
                    if(pilaOperadores.size() >= 2 && pilaSemantica.size() >= 2)
                    {
                        if(pilaOperadores.peek().equals("<") || pilaOperadores.peek().equals(">") || pilaOperadores.peek().equals("<=") || pilaOperadores.peek().equals(">="))
                        {
                            estadoSOP = "1";
                            ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                                if(ban == false)
                                    return false;
                        }
                        else if(pilaOperadores.peek().equals("==") || pilaOperadores.peek().equals("!="))
                        {
                            estadoSOP = "2";
                            ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                                if(ban == false)
                                    return false;
                        }
                        else
                        {
                            ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                            if(ban == false)
                                return false;
                        }
                        expPosfija+=pilaOperadores.peek() + " ";
                        simboloOp = pilaOperadores.pop();
                    }
               }
               simboloOp = pilaOperadores.pop();
               return true;
                //System.out.println("pila 2" + pilaOperadores);
            }
            switch (comp) {
                case "==":
                case "!=":
                case "<=":
                case ">=":
                case "<":
                case ">":
                    //realiza todas las operaciones que hayan antes de una relacional
                    while(!pilaOperadores.isEmpty() && !opRelacionales.contains(pilaOperadores.peek())){
                        expPosfija+=pilaOperadores.peek() + " ";
                        //System.out.println("posfija " + expPosfija);
                        simboloOp = pilaOperadores.pop();
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                        if(ban == false)
                            return false;
                    }
                    pilaOperadores.push(comp);
                    //System.out.println("pila" + pilaOperadores);
                    return true;
                case "+":
                case "-":
                    // si hay un + o - busca en la pila si hay un simbolo de mayor o igual importancia o si llega al final
                    while(!pilaOperadores.isEmpty() && !opRelacionales.contains(pilaOperadores.peek())){
                        expPosfija+=pilaOperadores.peek() + " ";
                        //System.out.println("posfija " + expPosfija);
                        simboloOp = pilaOperadores.pop();
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                        if(ban == false)
                            return false;
                    }
                    pilaOperadores.push(comp);
                    //System.out.println("pila" + pilaOperadores);
                    return true;
                case "*":
                case "/":
                    // si hay un * o / busca en la pila si hay un simbolo de mayor o igual importancia o si llega al final
                    while(!pilaOperadores.isEmpty() && (!pilaOperadores.peek().equals("-")&&!pilaOperadores.peek().equals("+")&&!opRelacionales.contains(pilaOperadores.peek()))){
                        expPosfija+=pilaOperadores.peek() + " ";
                        //System.out.println("posfija " + expPosfija);
                        simboloOp = pilaOperadores.pop();
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                        if(ban == false)
                            return false;
                    }
                    pilaOperadores.push(comp);
                    //System.out.println("pila" + pilaOperadores);
                    return true;
                default:
                    break;
            }
        }else{
            pilaOperadores.push(comp);
            //System.out.println("pila" + pilaOperadores);
            return true;
        }
        return true;
    }
    
    private boolean FinExpresion(String lexema, String nlinea)
    {
        String simboloOp = "";
        if(lexema.equals(";"))
        {
            while(!pilaOperadores.isEmpty()){
                //System.out.println("pila" + pilaOperadores);
                //System.out.println("posfija " + expPosfija);
                if(pilaOperadores.size() >= 1 && pilaSemantica.size() >= 2)
                {
                    if(pilaOperadores.peek().equals("<") || pilaOperadores.peek().equals(">") || pilaOperadores.peek().equals("<=") || pilaOperadores.peek().equals(">="))
                    {
                        estadoSOP = "1";
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                            if(ban == false)
                                return false;
                    }
                    else if(pilaOperadores.peek().equals("==") || pilaOperadores.peek().equals("!="))
                    {
                        estadoSOP = "2";
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                            if(ban == false)
                                return false;
                    }
                    else
                    {
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                        if(ban == false)
                            return false;
                    }
                }
                expPosfija+=pilaOperadores.peek() + " ";
                simboloOp = pilaOperadores.pop();
            }
            if (!scan.equals("1")) 
            {
                ban = SemanticoEvExp(nlinea);// Método que evalua si el resultado semantico de la expresión puede asignarse en la variable
                if(ban == false)
                    return false;
            }
            else
                scan = "";
        }
        else if(lexema.equals(")"))
        {
            // ) del do while y print
            while(pilaOperadores.size() >= 1){
                expPosfija+=pilaOperadores.peek() + " ";
                //System.out.println("pila" + pilaOperadores);
                //System.out.println("posfija " + expPosfija);
                    simboloOp = pilaOperadores.pop();
                    if(pilaSemantica.size() == 2)
                    {
                        if(simboloOp.equals("<") || simboloOp.equals(">") || simboloOp.equals("<=") || simboloOp.equals(">="))
                        {
                            estadoSOP = "1";
                            ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                                if(ban == false)
                                    return false;
                           estadoSOP = "";
                            CodIntDW(expPosfija, "while");
                           return true;
                        }
                        else if(simboloOp.equals("==") || simboloOp.equals("!="))
                        {
                            estadoSOP = "2";
                            ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                                if(ban == false)
                                    return false;
                            estadoSOP = "";
                            CodIntDW(expPosfija, "while");
                            return true;
                        }
                    }
                    else
                    {
                        ban = SemanticoOp(nlinea);// Método que determina el tipo de dato resultante y lo mete a la pila semantica
                        if(ban == false)
                            return false;
                    }
            }
            if(pilaOperadores.isEmpty())
            {
                ban = SemanticoEvExp(nlinea);// Método que evalua si el resultado semantico de la expresión puede asignarse en la variable
                if(ban == false)
                    return false;
            }
        }
        return true;
    }
    
    private boolean SemanticoOp(String nlinea)
    {
        String n2, n1, resu;
        switch(estadoSOP)
        {
            case "1":
                    n2 = pilaSemantica.pop();
                    n1 = pilaSemantica.pop();
                    resu = tablaTiposOp1[Integer.parseInt(n2)][Integer.parseInt(n1)]; 
                    if(!resu.equals("-1"))
                        pilaSemantica.push(resu);
                    else
                    {
                        err += "Error semantico en linea " + nlinea + " tipos de dato no compatibles \n";
                        errores.setText(err);
                        res+="La cadena no se acepta...";
                        sintactico.setText(res);
                        return false;
                    }
                break;
            case "2":
                    n2 = pilaSemantica.pop();
                    n1 = pilaSemantica.pop();
                    resu = tablaTiposOp2[Integer.parseInt(n2)][Integer.parseInt(n1)]; 
                    if(!resu.equals("-1"))
                        pilaSemantica.push(resu);
                    else
                    {
                        err += "Error semantico en linea " + nlinea + " tipos de dato no compatibles \n";
                        errores.setText(err);
                        res+="La cadena no se acepta...";
                        sintactico.setText(res);
                        return false;
                    }
                break;
            default:
                    if(pilaSemantica.size() >= 2)
                    {
                        n2 = pilaSemantica.pop();
                        n1 = pilaSemantica.pop();
                        resu = tablaTipos[Integer.parseInt(n2)][Integer.parseInt(n1)]; 
                        if(!resu.equals("-1"))
                                pilaSemantica.push(resu);
                        else
                        {
                            err += "Error semantico en linea " + nlinea + " error de tipo \n";
                            errores.setText(err);
                            res+="La cadena no se acepta...";
                            sintactico.setText(res);
                            return false;
                        }
                    }
                    else
                    {
                        err += "Error semantico en linea " + nlinea + " faltan operandos \n";
                        errores.setText(err);
                        res+="La cadena no se acepta...";
                        sintactico.setText(res);
                        return false;
                    }
            break;
}
        return true;
    }
    
    private boolean SemanticoEvExp(String nlinea)
    {
        boolean resu;
        String tipo="";
        switch(estadoAntSw)
        {
            case "95":
                resu = tablaAsigTipo[tipoSwitch][Integer.parseInt(pilaSemantica.pop())];
                if(!resu)
                {
                    err += "Error semantico en linea " + nlinea + " error de tipo en el case \n";
                    errores.setText(err);
                    res+="La cadena no se acepta...";
                    sintactico.setText(res);
                    return false;
                } 
                estadoAntSw = "";
                break;
            case "45":
                    if(!pilaSemantica.isEmpty())
                        tipo = pilaSemantica.pop();
                    switch(tipo)
                    {
                        case "0"://int -
                            codigoObjeto += "\"%d\\n\", "+expInfija+");\n";
                            expInfija = "";
                            estadoAntSw = "";
                            break;
                        case "1":// float
                            codigoObjeto += "\"%f\\n\", "+expInfija+");\n";
                            expInfija = "";
                            estadoAntSw = "";
                            break;
                        case "2":// boolean
                             codigoObjeto += "\"%d\\n\", "+expInfija+");\n";
                            expInfija = "";
                            estadoAntSw = "";
                            break;
                        case "3":// String
                            codigoObjeto += "\"%s\\n\", "+expInfija+");\n";
                            expInfija = "";
                            estadoAntSw = "";
                            break;
                            // revisar print vacio, error codObjeto
                    }
                break;
            default:
                resu = tablaAsigTipo[tipoAsig][Integer.parseInt(pilaSemantica.pop())];
                if(!resu)
                {
                    err += "Error semantico en linea " + nlinea + " error de tipo en la asignación \n";
                    errores.setText(err);
                    res+="La cadena no se acepta...";
                    sintactico.setText(res);
                    return false;
                } 
                CodInt(expPosfija, vAsig);
        }
        return true;
    }
    
    public void InicioCodigo()
    {
        codigoObjeto += "#include <stdio.h>\n#include<string.h>\n\nint main()\n{\n";
        interm.setText(codigoObjeto);
    }
    
    public void ExpresionCodigo(String lexema)
    {
        switch(tipo){
            case 0:
                codigoObjeto += "  int "+lexema+";\n";
                interm.setText(codigoObjeto);
                break;
            case 1:
                codigoObjeto += "  float "+lexema+";\n";
                interm.setText(codigoObjeto);
                break;
            case 2:
                codigoObjeto += "  int "+lexema+";\n";
                interm.setText(codigoObjeto);
                break;
            case 3:
                codigoObjeto += "  char "+lexema+ "[256]" +";\n";
                interm.setText(codigoObjeto);
                break;
        }
    }
    
    private void CodIntDW(String exp, String asig)
    {
        puntero = 0;
        String pos[] = exp.split(" ");
        int con = 1;
        int conSt = 1;
        for(int i = 0; i<pos.length; i++)
        {
            if(asig.equals("while"))
                {
                    for(i = 0; i<pos.length; i++)
                    {
                        if(!pos[i].equals("<")&&!pos[i].equals(">")&&!pos[i].equals("<=")&&!pos[i].equals(">=")&&!pos[i].equals("==")&&!pos[i].equals("!="))
                        {
                            if(puntero < con)
                                {
                                    if(!expPosfija.isEmpty())
                                    {
                                        codigoObjeto += "  float VDW" + con + " = " + pos[i]+";" + "\n";
                                        puntero = con;
                                        con++;
                                    }
                                }
                                else
                                {
                                    if(!expPosfija.isEmpty())
                                    {
                                        codigoObjeto += "  VDW" + con + " = " + pos[i]+";" + "\n";
                                        //puntero = con;
                                        con++;
                                    }
                                }
                            }
                        else
                        {
                            con-=2;
                            codigoObjeto += "  VDW" + con + " = " + "VDW" + con + pos[i] + "VDW" + (con+1) + ";\n";
                            codigoObjeto += "  if("+"VDW"+con+")";
                            con++;
                        }
                    }
                }
        }
    }
    
    private void CodInt(String exp, String asig)
    {
        System.out.println(expPosfija + "\n");
        String pos[] = exp.split(" ");
        int con = 1;
        int conSt = 1;
        for(int i = 0; i<pos.length; i++)
        {
            if(!pos[i].equals("+")&&!pos[i].equals("-")&&!pos[i].equals("*")&&!pos[i].equals("/") && !pos[i].equals("<")&&!pos[i].equals(">")&&!pos[i].equals("<=")&&!pos[i].equals(">=")&&!pos[i].equals("==")&&!pos[i].equals("!="))
            {
                if(compCadenaBand == true)
                {
                    if(punteroSt < conSt)
                    {
                        if(!expPosfija.isEmpty())
                        {
                            codigoObjeto += "  char VS"+conSt+"[256]" + " = " +pos[i]+";\n";
                            punteroSt = conSt;
                            conSt++;
                        }
                    }
                    else
                    {
                        if(!expPosfija.isEmpty())
                        {
                            codigoObjeto += " strcpy(VS"+conSt+", "+pos[i]+")" +";\n";
                            //puntero = con;
                            conSt++;
                        }
                    }
                }else{
                    if(puntero < con)
                    {
                        if(!expPosfija.isEmpty())
                        {
                            codigoObjeto += "  float V" + con + " = " + pos[i]+";" + "\n";
                            puntero = con;
                            con++;
                        }
                    }
                    else
                    {
                        if(!expPosfija.isEmpty())
                        {
                            codigoObjeto += "  V" + con + " = " + pos[i]+";" + "\n";
                            //puntero = con;
                            con++;
                        }
                    }
                }
            }
            else
            {   
                if(compCadenaBand == true)
                {
                    if(puntero < con)
                    {
                            codigoObjeto += "  float V" + con + " = strcmp(" + "VS" + (conSt-2) + " , " + " VS" + (conSt-1)+") == 0 ? 1 : 0;" + "\n";
                            puntero = con;
                            //con++;
                    }else{
                    //con-=2;
                    //conSt=-2;
                    codigoObjeto += "  V" + (con) + " = strcmp(" + "VS" + (conSt-2) + " , " + " VS" + (conSt-1)+") == 0 ? 1 : 0;" + "\n";
                    //con++;
                    //conSt++;
                    }
                }else{
                    con-=2;
                    codigoObjeto += "  V" + con + " = " + "V" + con + " " + pos[i] + " V" + (con+1)+";" + "\n";
                    con++;
                }
            }
        }
        if(!expPosfija.isEmpty())
            if(compCadenaBand == false)
                codigoObjeto += "  " + asig + " = " + "  V" + (con-1)+";\n";
            else
                codigoObjeto += "  " + asig + " = " + "  V" + (con)+";\n";
    }    
    
    public void FinCodigo()
    {
        codigoObjeto += "  return 0;\n}"; 
        interm.setText(codigoObjeto);
    }
    
    private void Error(int estado, String lexema, String nlinea)
    {
        if(!lexema.equals(""))
            err+="Error sintactico en linea "+nlinea+", no se esperaba "+lexema+" se esperaba: ";
        else
            err+="Error sintactico en linea "+nlinea+", se esperaba: ";
        for(int i=0; i<36; i++)
            if(!Tabla[estado][i].equals(""))
                err+=Columnas.get(i)+" ";
        res+="La cadena no se acepta...";
        sintactico.setText(res);
        errores.setText(err);
    }

    private void InicializarPilas() {
        pila.clear();
        pila.push("$");
        pila.push("q0");
        pilaOperadores.clear();
        pilaSemantica.clear();
        puntero = 0;
        punteroSt = 0;
        cont = 0;
    }

    private void inicializar() {
        archivo = new HerramientaArchivo();
        setTitle("ETHIDE");
        numerolinea2 = new NumeroLinea(codigoFuente);
        jScrollPane2.setRowHeaderView(numerolinea2);
    }

    private void Cerrar() {
        String opciones[] = {"Cerrar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(this, "¿Estas seguro de que quieres cerrar el programa? Todo cambio sin guardar se perdera", "Cierre de programa", 0, 0, null, opciones, EXIT_ON_CLOSE);
        if (eleccion == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        codigoFuente = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        lexico = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        sintactico = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        errores = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        interm = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        codigoFuente.setColumns(20);
        codigoFuente.setRows(5);
        codigoFuente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codigoFuenteKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(codigoFuente);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 53, 515, 280));

        lexico.setColumns(20);
        lexico.setRows(5);
        jScrollPane3.setViewportView(lexico);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 506, 179));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-por-nueva-copia-24.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-abrir-carpeta-24.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-guardar-24.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-deshacer-24.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-rehacer-24.png"))); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-play-24.png"))); // NOI18N
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        getContentPane().add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 35));

        sintactico.setColumns(20);
        sintactico.setRows(5);
        jScrollPane4.setViewportView(sintactico);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 480, 90));

        errores.setColumns(20);
        errores.setRows(5);
        jScrollPane1.setViewportView(errores);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 480, -1));

        interm.setColumns(20);
        interm.setRows(5);
        jScrollPane5.setViewportView(interm);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 270, 510, 260));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, 1090, 20));

        jMenu1.setText("Archivo");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-por-nueva-copia-24.png"))); // NOI18N
        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-abrir-carpeta-24.png"))); // NOI18N
        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-guardar-24.png"))); // NOI18N
        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-guardar-como-24.png"))); // NOI18N
        jMenuItem4.setText("Guardar como...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-cerrar-ventana-24.png"))); // NOI18N
        jMenuItem5.setText("Cerrar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-deshacer-24.png"))); // NOI18N
        jMenuItem6.setText("Deshacer");
        jMenuItem6.setActionCommand("");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-rehacer-24.png"))); // NOI18N
        jMenuItem7.setText("Rehacer");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-tijeras-24.png"))); // NOI18N
        jMenuItem8.setText("Cortar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-copiar-24.png"))); // NOI18N
        jMenuItem9.setText("Copiar");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-pegar-24.png"))); // NOI18N
        jMenuItem10.setText("Pegar");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("icons/IconoIDE.png"));
        return retValue;
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        lexico.setText("");
        archivo.Nuevo(this);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if (manager.canUndo()) {
            manager.undo();
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        codigoFuente.copy();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        archivo.Guardar(this);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        lexico.setText("");
        archivo.Abrir(this);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        lexico.setText("");
        archivo.guardarC(this);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void codigoFuenteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoFuenteKeyReleased
        int key = evt.getKeyCode();
        if ((key >= 65 && key <= 90) || (key >= 48 && key <= 57) || (key >= 97 && key <= 122) || (key != 27 && (key >= 37
                && key <= 40) && !(key >= 16 && key <= 18) && key != 524 && key != 20)) {
            if (!getTitle().contains("*")) {
                setTitle(getTitle() + "*");
            }
        }
    }//GEN-LAST:event_codigoFuenteKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        lexico.setText("");
        archivo.Nuevo(this);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        lexico.setText("");
        archivo.Abrir(this);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        archivo.Guardar(this);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void Limpiar() {
        errores.setText("");
        lexico.setText("");
        sintactico.setText("");
        interm.setText("");
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        InicializarPilas();
        Limpiar();
        tablaSimbolos.clear();
        res = "";
        err = "";
        expPosfija = "";
        expInfija = "";
        codigoObjeto = "";
        doWhile = "";
        bandDoWhile = false;
        punteroDoWhile = 0;
        AnalisisLexico();
        interm.setText(codigoObjeto);
        //for (Map.Entry<String, Integer> entry : tablaSimbolos.entrySet())
            //System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (manager.canUndo()) {
            manager.undo();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (manager.canRedo())
            manager.redo();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        if (manager.canRedo())
            manager.redo();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        codigoFuente.cut();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        codigoFuente.paste();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea codigoFuente;
    private javax.swing.JTextArea errores;
    private javax.swing.JTextArea interm;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea lexico;
    private javax.swing.JTextArea sintactico;
    // End of variables declaration//GEN-END:variables
}
